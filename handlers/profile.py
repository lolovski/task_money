import os
import re

from aiogram import F, Router, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from dotenv import load_dotenv

from database.requests.user import get_user_by_tg_id, debit, get_profile
from keyboard.inline.admin_panel import withdrawal_admin_keyboard
from keyboard.inline.profile import money_withdrawal_keyboard
from keyboard.reply.profile import choose_payment_system_keyboard, choose_bank_keyboard, contact_keyboard, \
    choose_telecom_operator_keyboard
from keyboard.reply.start import start_keyboard

load_dotenv()
admin_id = os.getenv('ADMIN_ID')
router = Router(name=__name__)


class MoneyWithdrawalForm(StatesGroup):
    message_id = State()

    telephone = State()
    sbp_bank = State()
    sbp_balance = State()

    card = State()
    bank = State()
    bank_balance = State()

    cripto = State()
    cripto_balance = State()

    mobile_operator = State()
    mobile_telephone = State()
    mobile_balance = State()


@router.message(F.text.startswith('–ü—Ä–æ—Ñ–∏–ª—å'))
async def main_profile_handler(message: Message, bot: Bot, state: FSMContext, tg_id: str):
    await state.clear()
    user, pending_tasks, count_ref = await get_profile(tg_id)
    text_pending_tasks = ' \n'
    for task in pending_tasks:
        text_pending_tasks += f'{task.title} | {task.reward}‚ÇΩ \n'
    
    await message.answer_sticker('CAACAgEAAxkBAAIU7mcIHR7ewG5XTmHgzoTAGoZfNoHJAAKbAgAClmsYRAGYrZHkPYMkNgQ')
    await message.answer(
        text=f'<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username} \n\n'
             f'üè¶ –ë–∞–ª–∞–Ω—Å: {user.balance}‚ÇΩ \n\n'
             f'üëæ ID: {user.id} \n\n'
             f'üí∞–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {count_ref}\n\n'
             f'üì•–ó–∞–¥–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {text_pending_tasks} \n</b>',
        reply_markup=money_withdrawal_keyboard)


@router.callback_query(F.data == 'money withdrawal')
async def money_withdrawal_handler(call: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id, )
    answer = await call.message.answer(
        text='<b>üí≥ –í–´–í–û–î –î–ï–ù–ï–ñ–ù–´–• –°–†–ï–î–°–¢–í –ü–†–û–ò–°–•–û–î–ò–¢ –¢–û–õ–¨–ö–û –ù–ê –ÆMoney (–†–§/–°–ù–ì) –∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Çs –†–§üí∏ \n\n'
             '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ (—Ä—É–±):üìå\n\n'
             '–Æmoney\n'
             '‚îú¬† –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞/—Å—á–µ—Ç–∞ - 150‚ÇΩ\n'
             '‚îî¬† –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã - 150 ‚ÇΩ\n\n'
             'üìå –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã (–†–§)\n'
             '‚îú¬† –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - 300 ‚ÇΩ\n'
             '‚îî¬† –ø–æ–Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã - 400 ‚ÇΩ\n\n'
             'üìå –ë–∞–ª–∞–Ω—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - 150 ‚ÇΩ‚ùóÔ∏è\n\n'
             '–í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –Ω–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ(–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ) –∫–æ—à–µ–ª—å–∫–∏ –ÆMoney. \n'
             'üñ• –ö–∞–∫ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫ <a href="https://yoomoney.ru/page?id=536144">–ÆMoney</a>\n\n'
             'üè¶ –í—ã–±–µ—Ä–∏ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ üè¶</b>',
        reply_markup=choose_payment_system_keyboard, disable_web_page_preview=True)
    await state.set_state(MoneyWithdrawalForm.message_id)
    await state.update_data(message_id=answer.message_id)


@router.message(F.text == '–°–ë–ü (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –†–§)')
async def sbp_bank_handler(message: Message, bot: Bot, state: FSMContext):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    context = await state.get_data()
    await bot.delete_message(chat_id=message.chat.id, message_id=context.get('message_id'))
    answer = await message.answer(
                text='<b>–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫</b>\n'
                     '–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞',
                reply_markup=choose_bank_keyboard),

    await state.set_state(MoneyWithdrawalForm.sbp_bank)
    await state.update_data(message_id=answer[0].message_id)


@router.message(MoneyWithdrawalForm.sbp_bank)
async def sbp_telephone_handler(message: Message, bot: Bot, state: FSMContext):
    sbp_bank = re.sub(r'[^a-zA-Z0-9–∞-—è–ê-–Ø—ë–Å\s]', '', message.text)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    context = await state.get_data()
    await bot.delete_message(chat_id=message.chat.id, message_id=context.get('message_id'))
    answer = await message.answer(text='<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>'
                                       ' (–§–æ—Ä–º–∞—Ç +79876543210)\n '
                                       '–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É', reply_markup=contact_keyboard)
    await state.set_state(MoneyWithdrawalForm.telephone)
    await state.update_data(message_id=answer.message_id)
    await state.update_data(sbp_bank=sbp_bank)


@router.message(MoneyWithdrawalForm.telephone)
async def sbp_balance_handler(message: Message, bot: Bot, state: FSMContext, tg_id: str):
    if message.contact:
        telephone = message.contact.phone_number
    else:
        telephone = re.sub(r'[^0-9\s]', '', message.text)
    user = await get_user_by_tg_id(tg_id)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

    context = await state.get_data()
    await bot.delete_message(chat_id=message.chat.id, message_id=context.get('message_id'))
    answer = await message.answer(
                                text=f"<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞\n"
                                     f"–ú–∏–Ω–∏–º—É–º: 150—Ä\n"
                                     f"–ë–∞–ª–∞–Ω—Å: {user.balance}</b>", reply_markup=ReplyKeyboardRemove())
    await state.set_state(MoneyWithdrawalForm.sbp_balance)
    await state.update_data(telephone=telephone)
    await state.update_data(message_id=answer.message_id)


@router.message(MoneyWithdrawalForm.sbp_balance)
async def sbp_final_handler(message: Message, bot: Bot, state: FSMContext, tg_id: str):
    balance = int(re.sub(r'[^0-9\s]', '', message.text))
    context = await state.get_data()
    user = await get_user_by_tg_id(tg_id)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await bot.delete_message(chat_id=message.chat.id, message_id=context.get('message_id'))
    if 150 <= balance <= user.balance:
        await debit(tg_id, balance)
        new_balance = user.balance - balance
        await bot.send_message(chat_id=admin_id, text=f'<b>–í—ã–≤–æ–¥ —Å–±–ø\n'
                                                      f'id {user.id}\n'
                                                      f'–°—É–º–º–∞ {balance}‚ÇΩ\n'
                                                      f'–ë–∞–Ω–∫ {context.get('sbp_bank')}\n'
                                                      f'–¢–µ–ª–µ—Ñ–æ–Ω {context["telephone"]}</b>',
                               reply_markup=await withdrawal_admin_keyboard(tg_id=tg_id, balance=balance))
        await message.answer(text=f'<b>–î–µ–Ω—å–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤—ã–≤–æ–¥, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ (~5—á) \n'
                                  f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance}‚ÇΩ</b>', reply_markup=start_keyboard
                             )
    else:
        if user.balance < balance:
            answer = await message.answer(text=f'<b>–ù–∞ —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥\n'
                                      f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance}‚ÇΩ\n'
                                      f'–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É</b>'
                                 )
            await state.set_state(MoneyWithdrawalForm.sbp_balance)
            await state.update_data(message_id=answer.message_id)
        else:
            answer = await message.answer(text='–í–≤–µ–¥–µ–Ω–Ω–∞—è –≤–∞–º–∏ —Å—É–º–º–∞ \n'
                                               '<b>–ù–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞!</b> \n'
                                               '–í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑')
            await state.set_state(MoneyWithdrawalForm.sbp_balance)
            await state.update_data(message_id=answer.message_id)


@router.message(F.text == '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ (–†–§)')
async def bank_name_handler(message: Message, bot: Bot, state: FSMContext):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    context = await state.get_data()
    await bot.delete_message(chat_id=message.chat.id, message_id=context.get('message_id'))
    answer = await message.answer(
                text='<b>–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫</b>\n'
                     '–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞',
                reply_markup=choose_bank_keyboard),

    await state.set_state(MoneyWithdrawalForm.bank)
    await state.update_data(message_id=answer[0].message_id)


@router.message(MoneyWithdrawalForm.bank)
async def bank_card_handler(message: Message, bot: Bot, state: FSMContext):
    bank_name = re.sub(r'[^a-zA-Z0-9–∞-—è–ê-–Ø—ë–Å\s]', '', message.text)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    context = await state.get_data()
    await bot.delete_message(chat_id=message.chat.id, message_id=context.get('message_id'))
    answer = await message.answer(text='<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ —Å—á–µ—Ç–∞</b>\n'
                                       '–§–æ—Ä–º–∞—Ç 1111222233334444')
    await state.set_state(MoneyWithdrawalForm.card)
    await state.update_data(message_id=answer.message_id)
    await state.update_data(bank=bank_name)


@router.message(MoneyWithdrawalForm.card)
async def bank_balance_handler(message: Message, bot: Bot, state: FSMContext, tg_id: str):
    card = re.sub(r'[^0-9\s]', '', message.text)
    user = await get_user_by_tg_id(tg_id)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    context = await state.get_data()
    await bot.delete_message(chat_id=message.chat.id, message_id=context.get('message_id'))
    answer = await message.answer(
                                text=f"<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞\n"
                                     f"–ú–∏–Ω–∏–º—É–º: 200—Ä\n"
                                     f"–ë–∞–ª–∞–Ω—Å: {user.balance}‚ÇΩ</b>", reply_markup=ReplyKeyboardRemove())
    await state.set_state(MoneyWithdrawalForm.bank_balance)
    await state.update_data(card=card)
    await state.update_data(message_id=answer.message_id)


@router.message(MoneyWithdrawalForm.bank_balance)
async def bank_final_handler(message: Message, bot: Bot, state: FSMContext, tg_id: str):
    balance = int(re.sub(r'[^0-9\s]', '', message.text))
    context = await state.get_data()
    user = await get_user_by_tg_id(tg_id)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await bot.delete_message(chat_id=message.chat.id, message_id=context.get('message_id'))
    if 200 <= balance <= user.balance:
        await debit(tg_id, balance)
        new_balance = user.balance - balance
        await bot.send_message(chat_id=admin_id, text=f'<b>–í—ã–≤–æ–¥ –∫–∞—Ä—Ç–∞\n'
                                                      f'id {user.id}\n'
                                                      f'–°—É–º–º–∞ {balance}‚ÇΩ\n'
                                                      f'–ë–∞–Ω–∫ {context.get('bank')}\n'
                                                      f'–ö–∞—Ä—Ç–∞/—Å—á—ë—Ç {context["card"]}</b>',
                               reply_markup=await withdrawal_admin_keyboard(tg_id=tg_id, balance=balance))
        await message.answer(text=f'<b>–î–µ–Ω—å–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤—ã–≤–æ–¥, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ (~5—á) \n'
                                  f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance}‚ÇΩ</b>', reply_markup=start_keyboard
                             )
    else:
        if user.balance < balance:
            answer = await message.answer(text=f'<b>–ù–∞ —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥\n'
                                      f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance}‚ÇΩ\n'
                                      f'–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É</b>'
                                 )
            await state.set_state(MoneyWithdrawalForm.bank_balance)
            await state.update_data(message_id=answer.message_id)
        else:
            answer = await message.answer(text='–í–≤–µ–¥–µ–Ω–Ω–∞—è –≤–∞–º–∏ —Å—É–º–º–∞ \n'
                                               '<b>–ù–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞!</b> \n'
                                               '–í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑')
            await state.set_state(MoneyWithdrawalForm.bank_balance)
            await state.update_data(message_id=answer.message_id)


@router.message(F.text == '–ö—Ä–∏–ø—Ç–∞')
async def cripto_wallet_handler(message: Message, bot: Bot, state: FSMContext):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    context = await state.get_data()
    await bot.delete_message(chat_id=message.chat.id, message_id=context.get('message_id'))
    answer = await message.answer(
                text='<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞</b>\n',
                reply_markup=choose_bank_keyboard),

    await state.set_state(MoneyWithdrawalForm.cripto)
    await state.update_data(message_id=answer[0].message_id)


@router.message(MoneyWithdrawalForm.cripto)
async def cripto_balance_handler(message: Message, bot: Bot, state: FSMContext, tg_id: str):
    cripto = re.sub(r'[^a-zA-Z0-9–∞-—è–ê-–Ø—ë–Å\s]', '', message.text)
    user = await get_user_by_tg_id(tg_id)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    context = await state.get_data()
    await bot.delete_message(chat_id=message.chat.id, message_id=context.get('message_id'))
    answer = await message.answer(
                                text=f"<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞\n"
                                     f"–ú–∏–Ω–∏–º—É–º: 1000—Ä\n"
                                     f"–ë–∞–ª–∞–Ω—Å: {user.balance}</b>", reply_markup=ReplyKeyboardRemove())
    await state.set_state(MoneyWithdrawalForm.cripto_balance)
    await state.update_data(cripto=cripto)
    await state.update_data(message_id=answer.message_id)


@router.message(MoneyWithdrawalForm.cripto_balance)
async def cripto_final_handler(message: Message, bot: Bot, state: FSMContext, tg_id: str):
    balance = int(re.sub(r'[^0-9\s]', '', message.text))
    context = await state.get_data()
    user = await get_user_by_tg_id(tg_id)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await bot.delete_message(chat_id=message.chat.id, message_id=context.get('message_id'))
    if 1000 <= balance <= user.balance:
        await debit(tg_id, balance)
        new_balance = user.balance - balance
        await bot.send_message(chat_id=admin_id, text=f'<b>–í—ã–≤–æ–¥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞\n'
                                                      f'id {user.id}\n'
                                                      f'–°—É–º–º–∞ {balance}‚ÇΩ\n'
                                                      f'–ö–æ—à–µ–ª–µ–∫ {context["cripto"]}</b>',
                               reply_markup=await withdrawal_admin_keyboard(tg_id=tg_id, balance=balance))
        await message.answer(text=f'–î–µ–Ω—å–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤—ã–≤–æ–¥, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ (~5—á) \n'
                                  f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance}', reply_markup=start_keyboard
                             )
    else:
        if user.balance < balance:
            answer = await message.answer(text=f'–ù–∞ —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥\n'
                                      f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance}\n'
                                      f'–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É'
                                 )
            await state.set_state(MoneyWithdrawalForm.cripto_balance)
            await state.update_data(message_id=answer.message_id)
        else:
            answer = await message.answer(text='–í–≤–µ–¥–µ–Ω–Ω–∞—è –≤–∞–º–∏ —Å—É–º–º–∞ \n'
                                               '<b>–ù–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞!</b> \n'
                                               '–í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑')
            await state.set_state(MoneyWithdrawalForm.cripto_balance)
            await state.update_data(message_id=answer.message_id)


@router.message(F.text == '–ú–æ–±–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å')
async def mobile_name_handler(message: Message, bot: Bot, state: FSMContext):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    context = await state.get_data()
    await bot.delete_message(chat_id=message.chat.id, message_id=context.get('message_id'))
    answer = await message.answer(
                text='<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</b>\n'
                     '–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞',
                reply_markup=choose_telecom_operator_keyboard),

    await state.set_state(MoneyWithdrawalForm.mobile_operator)
    await state.update_data(message_id=answer[0].message_id)


@router.message(MoneyWithdrawalForm.mobile_operator)
async def mobile_telephone_handler(message: Message, bot: Bot, state: FSMContext):
    mobile_operator = re.sub(r'[^a-zA-Z0-9–∞-—è–ê-–Ø—ë–Å\s]', '', message.text)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    context = await state.get_data()
    await bot.delete_message(chat_id=message.chat.id, message_id=context.get('message_id'))
    answer = await message.answer(text='<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>'
                                       ' (–§–æ—Ä–º–∞—Ç +79876543210)\n '
                                       '–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É', reply_markup=contact_keyboard)
    await state.set_state(MoneyWithdrawalForm.mobile_telephone)
    await state.update_data(message_id=answer.message_id)
    await state.update_data(mobile_operator=mobile_operator)


@router.message(MoneyWithdrawalForm.mobile_telephone)
async def mobile_balance_handler(message: Message, bot: Bot, state: FSMContext, tg_id: str):
    if message.contact:
        mobile_telephone = message.contact.phone_number
    else:
        mobile_telephone = re.sub(r'[^0-9\s]', '', message.text)
    user = await get_user_by_tg_id(tg_id)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    context = await state.get_data()
    await bot.delete_message(chat_id=message.chat.id, message_id=context.get('message_id'))
    answer = await message.answer(
                                text=f"<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞\n"
                                     f"–ú–∏–Ω–∏–º—É–º: 200—Ä\n"
                                     f"–ë–∞–ª–∞–Ω—Å: {user.balance}‚ÇΩ</b>", reply_markup=ReplyKeyboardRemove())
    await state.set_state(MoneyWithdrawalForm.mobile_balance)
    await state.update_data(mobile_telephone=mobile_telephone)
    await state.update_data(message_id=answer.message_id)


@router.message(MoneyWithdrawalForm.mobile_balance)
async def mobile_final_handler(message: Message, bot: Bot, state: FSMContext, tg_id: str):
    balance = int(re.sub(r'[^0-9\s]', '', message.text))
    context = await state.get_data()
    user = await get_user_by_tg_id(tg_id)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await bot.delete_message(chat_id=message.chat.id, message_id=context.get('message_id'))
    if 200 <= balance <= user.balance:
        await debit(tg_id, balance)
        new_balance = user.balance - balance
        await bot.send_message(chat_id=admin_id, text=f'<b>–í—ã–≤–æ–¥ –º–æ–±–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å\n'
                                                      f'id {user.id}\n'
                                                      f'–°—É–º–º–∞ {balance}‚ÇΩ\n'
                                                      f'–û–ø–µ—Ä–∞—Ç–æ—Ä {context.get('mobile_operator')}\n'
                                                      f'–ù–æ–º–µ—Ä {context["mobile_telephone</b>"]}',
                               reply_markup=await withdrawal_admin_keyboard(tg_id=tg_id, balance=balance))
        await message.answer(text=f'<b>–î–µ–Ω—å–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤—ã–≤–æ–¥, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ (~5—á) \n'
                                  f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance}</b>', reply_markup=start_keyboard
                             )
    else:
        if user.balance < balance:
            answer = await message.answer(text=f'<b>–ù–∞ —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥\n'
                                      f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance}‚ÇΩ\n'
                                      f'–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É</b>'
                                 )
            await state.set_state(MoneyWithdrawalForm.mobile_balance)
            await state.update_data(message_id=answer.message_id)
        else:
            answer = await message.answer(text='–í–≤–µ–¥–µ–Ω–Ω–∞—è –≤–∞–º–∏ —Å—É–º–º–∞ \n'
                                               '<b>–ù–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞!</b> \n'
                                               '–í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑')
            await state.set_state(MoneyWithdrawalForm.mobile_balance)
            await state.update_data(message_id=answer.message_id)